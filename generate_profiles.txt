Below is a complete “golden-master → clone-per-identity” recipe for both Windows and Linux.
Follow it once and you’ll be able to spin up as many clean Chrome personas as you need with just a single copy command.

0 Terminology used below
graphql
Copiar código
GoldenProfile/          # one pristine template you never touch again
ScraperProfiles/
    A/ B/ C/ …          # per-identity working copies (one ≙ one LinkedIn account)
device_A.json …         # your UA-CH fingerprint templates
proxy_A.yaml …          # sticky residential proxies (one per identity)
1 Create the golden-master profile (one-time)
Windows 10/11
powershell
Copiar código
# 1 a. Quit every chrome.exe first
taskkill /IM chrome.exe /F

# 1 b. Launch once to bootstrap the folders
& "C:\Program Files\Google\Chrome\Application\chrome.exe" `
   --user-data-dir=C:\GoldenProfile `
   --profile-directory=ProfileMaster `
   --no-first-run --disable-sync --disable-sync-preferences `
   --disable-extensions

# 1 c. (OPTIONAL) open chrome://extensions and install uBlock, etc.
#      then close the window.
Linux (Chrome or Chromium)
bash
Copiar código
# 1 a. Quit chrome/chromium
pkill chrome || pkill chromium

# 1 b. Bootstrap
google-chrome \
  --user-data-dir="$HOME/GoldenProfile" \
  --profile-directory=ProfileMaster \
  --no-first-run --disable-sync --disable-sync-preferences \
  --disable-extensions
# 1 c. Install / remove extensions, then close Chrome.
Result: the directory GoldenProfile/ now contains a fully-formed Default profile
(Cookies, History, Local State, Preferences, etc.) but no personal data.

2 Harden the template (still one-time)
Edit GoldenProfile/Local State (JSON):

jsonc
Copiar código
"signin": {
  "allowed": false
},
"user_experience_metrics": {
  "reporting_enabled": false,
  "client_id": "will_be_reset_per_clone"
},
"sync_disabled": true
This stops accidental Google-Sign-In and marks the profile “never synced.”

3 Clone the golden master every time you need a new identity

Windows (cmd / PowerShell)
powershell
Copiar código
$src = 'C:\Users\fxdam\EXCEL\linkedinBot\src\testing\profiles\ScraperProfiles\Golden\'
$dst = 'C:\Users\fxdam\EXCEL\linkedinBot\src\testing\profiles\ScraperProfiles\A'          # change A → B → C …
robocopy $src $dst /MIR /XJ

Linux (Bash)
bash
Copiar código
cp -a "$HOME/GoldenProfile"   "$HOME/ScraperProfiles/A"

3 b. Regenerate the hidden client_id (avoids cross-linking)
Both OSes: delete the key from the freshly-cloned Local State file; Chrome will write a new random GUID on first run.

PowerShell (Windows)

powershell
Copiar código
(Get-Content "$dst\Local State" -Raw) -replace '"client_id"\s*:\s*"[0-9A-F-]+"' , '"client_id": ""' |
  Set-Content "$dst\Local State"

Linux (jq)

bash
Copiar código
jq 'del(.user_experience_metrics.client_id)'  "$dst/Local State" \
   > "$dst/Local State.tmp" && mv "$dst/Local State.tmp" "$dst/Local State"

Now you can copy the folder A, as long as it has not been opened with chrome:

# run from  ...\ScraperProfiles
$src = "A"
$letters = [char[]]([byte[]](66..85))   # ASCII B (=66) through U (=85)

foreach ($L in $letters) {
    $dst = "$L"
    Write-Host "Cloning $src -> $dst"
    robocopy $src $dst /MIR /XJ | Out-Null

    $ls = "$dst\Local State"
    (Get-Content -LiteralPath $ls -Raw) `
        -replace '"client_id"\s*:\s*"[0-9A-F-]+"' , '"client_id": ""' `
        -replace '"client_id2"\s*:\s*"[0-9A-F-]+"' , '"client_id2": ""' `
        -replace '"session_id"\s*:\s*\d+' , '"session_id": 0' `
    | Set-Content -LiteralPath $ls -Encoding UTF8
}

NOT NEEDED
3 c. Rename the profile internally (optional, cosmetic)
Open $dst/Default/Preferences, change:

jsonc
Copiar código
"profile": { "name": "Identity-A" }
Repeat steps 3 a–c for B, C, D, E …

You can also do it automatically through the terminal:

# run from ...\ScraperProfiles
$letters = [char[]]([byte[]](66..85))          # B-U
foreach ($L in $letters) {

    $ls  = "$L\Local State"
    $pref = "$L\BaseProfile\Preferences"

    $newName = "Identity-$L"

    # --- patch Preferences ---
    (Get-Content -LiteralPath $pref -Raw |
        ConvertFrom-Json).tap({
            $_.profile.name = $newName
        }) |
        ConvertTo-Json -Depth 99 -Compress |
        Set-Content -LiteralPath $pref -Encoding UTF8
}
"✓ renamed display name inside B–U"

4 Launch each identity via undetected-chromedriver (works on both OSes)
python
Copiar código
import json, pathlib, undetected_chromedriver as uc

def launch(identity: str):
    root   = pathlib.Path("C:/ScraperProfiles")      # or "/home/you/ScraperProfiles"
    tpl    = json.load(open(f"device_{identity}.json"))
    proxy  = json.load(open(f"proxy_{identity}.yaml"))["url"]

    ua = (f"Mozilla/5.0 ({tpl['platform']} {tpl['platformVersion']}; "
          f"{'Mobile' if tpl['mobile'] else 'Win64; x64'}) "
          f"AppleWebKit/537.36 (KHTML, like Gecko) "
          f"Chrome/{tpl['uaFullVersion']} Safari/537.36")

    opts = uc.ChromeOptions()
    opts.add_argument(f"--user-data-dir={root}")
    opts.add_argument(f"--profile-directory={identity}")     # A / B / C …
    opts.add_argument(f"--fake-high-entropy-client-hints={json.dumps(tpl)}")
    opts.add_argument(f"--user-agent={ua}")
    opts.add_argument(f"--proxy-server={proxy}")
    opts.add_argument("--window-size=1280,800")

    return uc.Chrome(options=opts, headless=False)
Call launch("A"), launch("B"), etc.; each browser starts with its own cookies, own proxy, own fingerprint.

5 Ground rules for safe reuse
✅ Allowed	❌ Never do
Re-open profile A as many times as you like (it belongs to one LinkedIn account).	Point profile A at proxy B or device B’s template.
Clone GoldenProfile into F, G, H… any time you need fresh identities.	Wipe cookies and re-use a folder for a different persona—GUIDs & DB rows survive.

As long as you clone once per persona and never mix proxies or fingerprints, you can recycle the golden master indefinitely.